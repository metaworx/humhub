{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["import {keymap} from \"prosemirror-keymap\"\r\nimport {history} from \"prosemirror-history\"\r\nimport {baseKeymap} from \"prosemirror-commands\"\r\nimport {Plugin} from \"prosemirror-state\"\r\nimport {dropCursor} from \"prosemirror-dropcursor\"\r\nimport {gapCursor} from \"prosemirror-gapcursor\"\r\nimport {menuBar} from \"prosemirror-menu\"\r\n\r\nimport {buildMenuItems} from \"./menu\"\r\nimport {buildKeymap} from \"./keymap\"\r\nimport {buildInputRules} from \"./inputrules\"\r\n\r\nexport {buildMenuItems, buildKeymap, buildInputRules}\r\n\r\n// !! This module exports helper functions for deriving a set of basic\r\n// menu items, input rules, or key bindings from a schema. These\r\n// values need to know about the schema for two reasons—they need\r\n// access to specific instances of node and mark types, and they need\r\n// to know which of the node and mark types that they know about are\r\n// actually present in the schema.\r\n//\r\n// The `exampleSetup` plugin ties these together into a plugin that\r\n// will automatically enable this basic functionality in an editor.\r\n\r\n// :: (Object) → [Plugin]\r\n// A convenience plugin that bundles together a simple menu with basic\r\n// key bindings, input rules, and styling for the example schema.\r\n// Probably only useful for quickly setting up a passable\r\n// editor—you'll need more control over your settings in most\r\n// real-world situations.\r\n//\r\n//   options::- The following options are recognized:\r\n//\r\n//     schema:: Schema\r\n//     The schema to generate key bindings and menu items for.\r\n//\r\n//     mapKeys:: ?Object\r\n//     Can be used to [adjust](#example-setup.buildKeymap) the key bindings created.\r\n//\r\n//     menuBar:: ?bool\r\n//     Set to false to disable the menu bar.\r\n//\r\n//     history:: ?bool\r\n//     Set to false to disable the history plugin.\r\n//\r\n//     floatingMenu:: ?bool\r\n//     Set to false to make the menu bar non-floating.\r\n//\r\n//     menuContent:: [[MenuItem]]\r\n//     Can be used to override the menu content.\r\nexport function exampleSetup(options) {\r\n  let plugins = [\r\n    buildInputRules(options.schema),\r\n    keymap(buildKeymap(options.schema, options.mapKeys)),\r\n    keymap(baseKeymap),\r\n    dropCursor(),\r\n    gapCursor()\r\n  ]\r\n  if (options.menuBar !== false)\r\n    plugins.push(menuBar({floating: options.floatingMenu !== false,\r\n                          content: options.menuContent || buildMenuItems(options.schema).fullMenu}))\r\n  if (options.history !== false)\r\n    plugins.push(history())\r\n\r\n  return plugins.concat(new Plugin({\r\n    props: {\r\n      attributes: {class: \"ProseMirror-example-setup-style\"}\r\n    }\r\n  }))\r\n}\r\n"],"names":["let","buildInputRules","keymap","buildKeymap","baseKeymap","dropCursor","gapCursor","menuBar","buildMenuItems","history","Plugin"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA,AAAO,SAAS,YAAY,CAAC,OAAO,EAAE;EACpCA,IAAI,OAAO,GAAG;IACZC,6BAAe,CAAC,OAAO,CAAC,MAAM,CAAC;IAC/BC,wBAAM,CAACC,qBAAW,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;IACpDD,wBAAM,CAACE,8BAAU,CAAC;IAClBC,gCAAU,EAAE;IACZC,8BAAS,EAAE;IACZ;EACD,IAAI,OAAO,CAAC,OAAO,KAAK,KAAK;IAC3B,EAAA,OAAO,CAAC,IAAI,CAACC,uBAAO,CAAC,CAAC,QAAQ,EAAE,OAAO,CAAC,YAAY,KAAK,KAAK;0BACxC,OAAO,EAAE,OAAO,CAAC,WAAW,IAAIC,sBAAc,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAC,EAAA;EAClG,IAAI,OAAO,CAAC,OAAO,KAAK,KAAK;IAC3B,EAAA,OAAO,CAAC,IAAI,CAACC,0BAAO,EAAE,EAAC,EAAA;;EAEzB,OAAO,OAAO,CAAC,MAAM,CAAC,IAAIC,uBAAM,CAAC;IAC/B,KAAK,EAAE;MACL,UAAU,EAAE,CAAC,KAAK,EAAE,iCAAiC,CAAC;KACvD;GACF,CAAC,CAAC;CACJ;;;;;;;"}